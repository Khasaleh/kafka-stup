---
apiVersion: v1
kind: ConfigMap
metadata:
  name: search-service-config
  namespace: default
  labels:
    app: search-service
data:
  SERVICE_NAME: "search-service"
  NAMESPACE: "default"
  ENVIRONMENT: "dev"
  LOG_LEVEL: "INFO"

  # App port (inside the pod)
  server.port: "80"

  # Discovery / Config (dev)
  DISCOVERY_URL: "http://192.168.1.212:8761"
  CONFIG_URL: "http://config-server"
  spring.profiles.active: "dev"
  eureka.instance.ip-address: "search-service"
  eureka.instance.prefer-ip-address: "true"

  # Elasticsearch (dev)
  elasticsearch.host: "elasticsearch-1736162529-master-hl.default.svc.cluster.local"
  elasticsearch.port: "9200"
---
apiVersion: v1
kind: Secret
metadata:
  name: search-service-secret
  namespace: default
  labels:
    app: search-service
type: Opaque
data: {}
---
apiVersion: v1
kind: Service
metadata:
  name: search-service
  namespace: default
  labels:
    app: search-service
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: search-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: search-service
  namespace: default
  labels:
    app: search-service
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: search-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        app: search-service
    spec:
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: dockerhub-secret
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

      initContainers:
        - name: wait-for-elasticsearch
          image: busybox:1.36
          command: ["/bin/sh","-c"]
          args:
            - |
              echo "Waiting for ${ES_HOST}:${ES_PORT} (Elasticsearch)â€¦";
              i=0; until nc -z ${ES_HOST} ${ES_PORT}; do i=$((i+1)); if [ "$i" -ge 300 ]; then echo "Elasticsearch still unreachable after ~10m"; exit 1; fi; sleep 2; done;
              echo "Elasticsearch is reachable.";
          env:
            - name: ES_HOST
              valueFrom: { configMapKeyRef: { name: search-service-config, key: elasticsearch.host } }
            - name: ES_PORT
              valueFrom: { configMapKeyRef: { name: search-service-config, key: elasticsearch.port } }

      containers:
        - name: search-service
          image: khsaleh889/familymicroservices:$IMAGE
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP

          env:
            # Basics
            - { name: SERVICE_NAME, valueFrom: { configMapKeyRef: { name: search-service-config, key: SERVICE_NAME } } }
            - { name: NAMESPACE,    valueFrom: { configMapKeyRef: { name: search-service-config, key: NAMESPACE } } }
            - { name: ENVIRONMENT,  valueFrom: { configMapKeyRef: { name: search-service-config, key: ENVIRONMENT } } }
            - { name: LOG_LEVEL,    valueFrom: { configMapKeyRef: { name: search-service-config, key: LOG_LEVEL } } }
            - { name: server.port,  valueFrom: { configMapKeyRef: { name: search-service-config, key: server.port } } }

            # Discovery / Config
            - { name: DISCOVERY_URL, valueFrom: { configMapKeyRef: { name: search-service-config, key: DISCOVERY_URL } } }
            - { name: CONFIG_URL,    valueFrom: { configMapKeyRef: { name: search-service-config, key: CONFIG_URL } } }
            - { name: spring.profiles.active, valueFrom: { configMapKeyRef: { name: search-service-config, key: spring.profiles.active } } }
            - { name: eureka.instance.ip-address, valueFrom: { configMapKeyRef: { name: search-service-config, key: eureka.instance.ip-address } } }
            - { name: eureka.instance.prefer-ip-address, valueFrom: { configMapKeyRef: { name: search-service-config, key: eureka.instance.prefer-ip-address } } }

            # Elasticsearch (provide both forms)
            - { name: elasticsearch.host, valueFrom: { configMapKeyRef: { name: search-service-config, key: elasticsearch.host } } }
            - { name: elasticsearch.port, valueFrom: { configMapKeyRef: { name: search-service-config, key: elasticsearch.port } } }
            - { name: ELASTICSEARCH_HOST, valueFrom: { configMapKeyRef: { name: search-service-config, key: elasticsearch.host } } }
            - { name: ELASTICSEARCH_PORT, valueFrom: { configMapKeyRef: { name: search-service-config, key: elasticsearch.port } } }

          startupProbe:
            tcpSocket: { port: 80 }
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 120   # ~10 minutes
          readinessProbe:
            tcpSocket: { port: 80 }
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            tcpSocket: { port: 80 }
            initialDelaySeconds: 120
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3

          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1000m"
              memory: "2Gi"
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: search-service-hpa
  namespace: default
  labels:
    app: search-service
    component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: search-service
  minReplicas: 2
  maxReplicas: 8
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 2
          periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
        - type: Pods
          value: 1
          periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: search-service-pdb
  namespace: default
  labels:
    app: search-service
    component: pdb
spec:
  minAvailable: 50%
  selector:
    matchLabels:
      app: search-service
