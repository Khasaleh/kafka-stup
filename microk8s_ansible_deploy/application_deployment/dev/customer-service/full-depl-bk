apiVersion: v1
kind: ConfigMap
metadata:
  name: events-service-config
  namespace: default
  labels:
    app: events-service
data:
  SERVICE_NAME: "events-service"
  NAMESPACE: "default"
  ENVIRONMENT: "dev"
  LOG_LEVEL: "INFO"
  server.port: "8089"
  spring.profiles.active: "dev"
  spring.batch.job.enabled: "false"
  DB_HOST: "192.168.1.213"
  DB_PORT: "5432"
  DB_NAME: "eventsdb"
  DISCOVERY_URL: "http://eureka-server:8761/eureka"
  CONFIG_URL: "http://config-server"
  REDIS_HOST: "192.168.1.217"
  REDIS_PORT: "6379"
  fazeal-social-service-api.base: "http://api-server:80"
  amazonProperties.endpointUrl: "https://s3.us-east-1.wasabisys.com/"
  amazonProperties.bucketName: "fazeal-social-nonprod.fazeal.com"
  amazonProperties.assetsBucketName: "fazeal-ui-assets.fazeal.com"
  spring.cloud.stream.kafka.binder.brokers: "192.168.1.225:29093,192.168.1.224:39093"
---
apiVersion: v1
kind: Secret
metadata:
  name: events-service-secret
  namespace: default
  labels:
    app: events-service
type: Opaque
data:
  SPRING_DATASOURCE_USERNAME: YWRtaW4=
  SPRING_DATASOURCE_PASSWORD: bmV3MjAyNQ==
  REDIS_PASSWORD: YWRtaW4xMjM0
  JWT_SECRET: and0X3NlY3JldF9rZXlfZm9yX2V2ZW50cy1zZXJ2aWNlXzIwMjQ=
  amazonProperties.accessKey: "VVU1MUJSWVFSOEpKSkQyWDBTMTE="
  amazonProperties.secretKey: "aXMzYTNSZWtUYlFIdHNFQTAydFVBYW40Q3pIU3VpQTdodFA2a2xScA=="
  AWS_ACCESS_KEY: "VVU1MUJSWVFSOEpKSkQyWDBTMTE="
  AWS_SECRET_KEY: "aXMzYTNSZWtUYlFIdHNFQTAydFVBYW40Q3pIU3VpQTdodFA2a2xScA=="
  amazonProperties.assetsSecretKey: "aXMzYTNSZWtUYlFIdHNFQTAydFVBYW40Q3pIU3VpQTdodFA2a2xScA=="
  amazonProperties.assetsAccessKey: "VVU1MUJSWVFSOEpKSkQyWDBTMTE="
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: events-service
  namespace: default
  labels:
    app: events-service
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: events-service
  strategy:
    type: RollingUpdate
    rollingUpdate: { maxSurge: 25%, maxUnavailable: 25% }
  template:
    metadata:
      labels:
        app: events-service
    spec:
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: dockerhub-secret
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      containers:
        - name: events-service
          image: khsaleh889/familymicroservices:$IMAGE
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8089
              protocol: TCP
          env:
            - name: SERVICE_NAME
              valueFrom: { configMapKeyRef: { name: events-service-config, key: SERVICE_NAME } }
            - name: NAMESPACE
              valueFrom: { configMapKeyRef: { name: events-service-config, key: NAMESPACE } }
            - name: ENVIRONMENT
              valueFrom: { configMapKeyRef: { name: events-service-config, key: ENVIRONMENT } }
            - name: LOG_LEVEL
              valueFrom: { configMapKeyRef: { name: events-service-config, key: LOG_LEVEL } }
            - name: server.port
              valueFrom: { configMapKeyRef: { name: events-service-config, key: server.port } }
            - name: spring.profiles.active
              valueFrom: { configMapKeyRef: { name: events-service-config, key: spring.profiles.active } }
            - name: spring.batch.job.enabled
              valueFrom: { configMapKeyRef: { name: events-service-config, key: spring.batch.job.enabled } }
            - name: DB_HOST
              valueFrom: { configMapKeyRef: { name: events-service-config, key: DB_HOST } }
            - name: DB_PORT
              valueFrom: { configMapKeyRef: { name: events-service-config, key: DB_PORT } }
            - name: DB_NAME
              valueFrom: { configMapKeyRef: { name: events-service-config, key: DB_NAME } }
            - name: DISCOVERY_URL
              valueFrom: { configMapKeyRef: { name: events-service-config, key: DISCOVERY_URL } }
            - name: CONFIG_URL
              valueFrom: { configMapKeyRef: { name: events-service-config, key: CONFIG_URL } }
            - name: REDIS_HOST
              valueFrom: { configMapKeyRef: { name: events-service-config, key: REDIS_HOST } }
            - name: REDIS_PORT
              valueFrom: { configMapKeyRef: { name: events-service-config, key: REDIS_PORT } }
            - name: fazeal-social-service-api.base
              valueFrom: { configMapKeyRef: { name: events-service-config, key: fazeal-social-service-api.base } }
            - name: amazonProperties.endpointUrl
              valueFrom: { configMapKeyRef: { name: events-service-config, key: amazonProperties.endpointUrl } }
            - name: amazonProperties.bucketName
              valueFrom: { configMapKeyRef: { name: events-service-config, key: amazonProperties.bucketName } }
            - name: amazonProperties.assetsBucketName
              valueFrom: { configMapKeyRef: { name: events-service-config, key: amazonProperties.assetsBucketName } }
            - name: spring.cloud.stream.kafka.binder.brokers
              valueFrom: { configMapKeyRef: { name: events-service-config, key: spring.cloud.stream.kafka.binder.brokers } }
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom: { secretKeyRef: { name: events-service-secret, key: SPRING_DATASOURCE_USERNAME } }
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom: { secretKeyRef: { name: events-service-secret, key: SPRING_DATASOURCE_PASSWORD } }
            - name: REDIS_PASSWORD
              valueFrom: { secretKeyRef: { name: events-service-secret, key: REDIS_PASSWORD } }
            - name: JWT_SECRET
              valueFrom: { secretKeyRef: { name: events-service-secret, key: JWT_SECRET } }
            - name: amazonProperties.accessKey
              valueFrom: { secretKeyRef: { name: events-service-secret, key: amazonProperties.accessKey } }
            - name: amazonProperties.secretKey
              valueFrom: { secretKeyRef: { name: events-service-secret, key: amazonProperties.secretKey } }
            - name: AWS_ACCESS_KEY
              valueFrom: { secretKeyRef: { name: events-service-secret, key: AWS_ACCESS_KEY } }
            - name: AWS_SECRET_KEY
              valueFrom: { secretKeyRef: { name: events-service-secret, key: AWS_SECRET_KEY } }
            - name: amazonProperties.assetsSecretKey
              valueFrom: { secretKeyRef: { name: events-service-secret, key: amazonProperties.assetsSecretKey } }
            - name: amazonProperties.assetsAccessKey
              valueFrom: { secretKeyRef: { name: events-service-secret, key: amazonProperties.assetsAccessKey } }
          startupProbe:
            tcpSocket:
              port: 8089
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 60
          readinessProbe:
            tcpSocket:
              port: 8089
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          livenessProbe:
            tcpSocket:
              port: 8089
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            requests: { cpu: "250m", memory: "512Mi" }
            limits: { cpu: "500m", memory: "1Gi" }
---
apiVersion: v1
kind: Service
metadata:
  name: events-service
  namespace: default
  labels:
    app: events-service
spec:
  type: ClusterIP
  selector:
    app: events-service
  ports:
    - name: http
      port: 8089
      targetPort: 8089
      protocol: TCP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: events-service-hpa
  namespace: default
  labels:
    app: events-service
    component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: events-service
  minReplicas: 2
  maxReplicas: 8
  metrics:
    - type: Resource
      resource:
        name: cpu
        target: { type: Utilization, averageUtilization: 70 }
    - type: Resource
      resource:
        name: memory
        target: { type: Utilization, averageUtilization: 70 }
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 2
          periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
        - type: Pods
          value: 1
          periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: events-service-pdb
  namespace: default
  labels:
    app: events-service
    component: pdb
spec:
  minAvailable: 50%
  selector:
    matchLabels:
      app: events-service
