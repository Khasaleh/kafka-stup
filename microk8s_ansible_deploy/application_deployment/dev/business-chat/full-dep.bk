---
apiVersion: v1
kind: ConfigMap
metadata:
  name: business-chat-config
  namespace: default
  labels:
    app: business-chat
data:
  SERVICE_NAME: "business-chat"
  NAMESPACE: "default"
  ENVIRONMENT: "dev"
  LOG_LEVEL: "INFO"
  eureka.instance.ip-address: "business-chat"
  HOSTNAME: "business-chat"
  PORT: "3002"
  EUREKA_HOST: "192.168.1.212"
  EUREKA_PORT: "8761"

---
apiVersion: v1
kind: Secret
metadata:
  name: business-chat-secret
  namespace: default
  labels:
    app: business-chat
type: Opaque
data:
  # base64("business-chat")
  SERVICE_NAME: YnVzaW5lc3MtY2hhdA==

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: business-chat
  namespace: default
  labels:
    app: business-chat
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: business-chat
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        app: business-chat
    spec:
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: dockerhub-secret
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      containers:
        - name: business-chat
          image: khsaleh889/familymicroservices:$IMAGE
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3002
              protocol: TCP
          envFrom:
            - configMapRef:
                name: business-chat-config
            - secretRef:
                name: business-chat-secret
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          # Give the app time to bind the port
          startupProbe:
            tcpSocket:
              port: 3002
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 60   # ~5 minutes max warmup
          # Use TCP to avoid 401 on secured actuator; switch to HTTP if health is open
          readinessProbe:
            tcpSocket:
              port: 3002
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          livenessProbe:
            tcpSocket:
              port: 3002
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          # If your /actuator/health is public, replace liveness/readiness with:
          # livenessProbe:
          #   httpGet: { path: /actuator/health, port: 3002 }
          #   initialDelaySeconds: 60, periodSeconds: 20, timeoutSeconds: 5, failureThreshold: 3
          # readinessProbe:
          #   httpGet: { path: /actuator/health, port: 3002 }
          #   initialDelaySeconds: 20, periodSeconds: 10, timeoutSeconds: 3, failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: business-chat
  namespace: default
  labels:
    app: business-chat
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 3002        # Ingress should point here
      targetPort: 3002  # Matches container port
      protocol: TCP
  selector:
    app: business-chat

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: business-chat-hpa
  namespace: default
  labels:
    app: business-chat
    component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: business-chat
  minReplicas: 2
  maxReplicas: 8
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 2
          periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
        - type: Pods
          value: 1
          periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: business-chat-pdb
  namespace: default
  labels:
    app: business-chat
    component: pdb
spec:
  minAvailable: 50%
  selector:
    matchLabels:
      app: business-chat
