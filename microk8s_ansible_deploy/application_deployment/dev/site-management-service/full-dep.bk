---
apiVersion: v1
kind: ConfigMap
metadata:
  name: site-management-service-config
  namespace: default
  labels:
    app: site-management-service
data:
  SERVICE_NAME: "site-management-service"
  NAMESPACE: "default"
  ENVIRONMENT: "dev"
  LOG_LEVEL: "INFO"
  server.port: "80"

  # Discovery (dev)
  DISCOVERY_URL: "http://192.168.1.212:8761"
  CONFIG_URL: "http://config-server"
  eureka.instance.ip-address: "site-management-service"
  eureka.instance.prefer-ip-address: "true"
  spring.batch.job.enabled: "false"
  spring.profiles.active: "dev"

  # Database (dev)
  DB_HOST: "192.168.1.213"
  DB_PORT: "5432"
  SPRING_DATASOURCE_URL: "jdbc:postgresql://192.168.1.213:5432/site_management?currentSchema=public"

  # Redis (dev)
  REDIS_HOST: "192.168.1.217"
  REDIS_PORT: "6379"

  # S3 (dev)
  amazonProperties.endpointUrl: "https://s3.us-east-1.wasabisys.com/"
  amazonProperties.bucketName: "fazeal-social-nonprod.fazeal.com"
  amazonProperties.assetsBucketName: "fazeal-ui-assets.fazeal.com"

  # External API Dependencies (missing keys added)
  catalog-service-api.base: "http://catalog-service:80/api/v1"
  fazeal-social-service-api.base: "http://api-server:80"
  user-notification-service-api.base: "http://notification-service:80"
---
apiVersion: v1
kind: Service
metadata:
  name: site-management-service
  namespace: default
  labels:
    app: site-management-service
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: site-management-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: site-management-service
  namespace: default
  labels:
    app: site-management-service
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: site-management-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        app: site-management-service
    spec:
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: dockerhub-secret
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

      initContainers:
        - name: wait-for-postgres
          image: busybox:1.36
          command: ["/bin/sh","-c"]
          args:
            - |
              echo "Waiting for ${DB_HOST}:${DB_PORT} (Postgres)…";
              i=0; until nc -z ${DB_HOST} ${DB_PORT}; do i=$((i+1)); if [ "$i" -ge 300 ]; then echo "Postgres unreachable after ~10m"; exit 1; fi; sleep 2; done;
              echo "Postgres is reachable.";
          env:
            - name: DB_HOST
              valueFrom: { configMapKeyRef: { name: site-management-service-config, key: DB_HOST } }
            - name: DB_PORT
              valueFrom: { configMapKeyRef: { name: site-management-service-config, key: DB_PORT } }

        - name: wait-for-redis
          image: busybox:1.36
          command: ["/bin/sh","-c"]
          args:
            - |
              echo "Waiting for ${REDIS_HOST}:${REDIS_PORT} (Redis)…";
              i=0; until nc -z ${REDIS_HOST} ${REDIS_PORT}; do i=$((i+1)); if [ "$i" -ge 300 ]; then echo "Redis unreachable after ~10m"; exit 1; fi; sleep 2; done;
              echo "Redis is reachable.";
          env:
            - name: REDIS_HOST
              valueFrom: { configMapKeyRef: { name: site-management-service-config, key: REDIS_HOST } }
            - name: REDIS_PORT
              valueFrom: { configMapKeyRef: { name: site-management-service-config, key: REDIS_PORT } }

      containers:
        - name: site-management-service
          image: khsaleh889/familymicroservices:$IMAGE
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            # Basics
            - { name: SERVICE_NAME, valueFrom: { configMapKeyRef: { name: site-management-service-config, key: SERVICE_NAME } } }
            - { name: NAMESPACE,    valueFrom: { configMapKeyRef: { name: site-management-service-config, key: NAMESPACE } } }
            - { name: ENVIRONMENT,  valueFrom: { configMapKeyRef: { name: site-management-service-config, key: ENVIRONMENT } } }
            - { name: LOG_LEVEL,    valueFrom: { configMapKeyRef: { name: site-management-service-config, key: LOG_LEVEL } } }
            - { name: server.port,  valueFrom: { configMapKeyRef: { name: site-management-service-config, key: server.port } } }

            # Discovery / Profile / Batch
            - { name: DISCOVERY_URL, valueFrom: { configMapKeyRef: { name: site-management-service-config, key: DISCOVERY_URL } } }
            - { name: CONFIG_URL,    valueFrom: { configMapKeyRef: { name: site-management-service-config, key: CONFIG_URL } } }
            - { name: eureka.instance.ip-address, valueFrom: { configMapKeyRef: { name: site-management-service-config, key: eureka.instance.ip-address } } }
            - { name: eureka.instance.prefer-ip-address, valueFrom: { configMapKeyRef: { name: site-management-service-config, key: eureka.instance.prefer-ip-address } } }
            - { name: spring.batch.job.enabled, valueFrom: { configMapKeyRef: { name: site-management-service-config, key: spring.batch.job.enabled } } }
            - { name: spring.profiles.active, valueFrom: { configMapKeyRef: { name: site-management-service-config, key: spring.profiles.active } } }

            # Database
            - { name: SPRING_DATASOURCE_URL,      valueFrom: { configMapKeyRef: { name: site-management-service-config, key: SPRING_DATASOURCE_URL } } }
            - { name: SPRING_DATASOURCE_USERNAME, valueFrom: { secretKeyRef: { name: site-management-service-secret, key: DB_USER } } }
            - { name: SPRING_DATASOURCE_PASSWORD, valueFrom: { secretKeyRef: { name: site-management-service-secret, key: DB_PASSWORD } } }

            # Redis (generic + Spring variants)
            - { name: REDIS_HOST, valueFrom: { configMapKeyRef: { name: site-management-service-config, key: REDIS_HOST } } }
            - { name: REDIS_PORT, valueFrom: { configMapKeyRef: { name: site-management-service-config, key: REDIS_PORT } } }
            - { name: REDIS_PASSWORD, valueFrom: { secretKeyRef: { name: site-management-service-secret, key: REDIS_PASSWORD } } }
            - { name: SPRING_REDIS_HOST, valueFrom: { configMapKeyRef: { name: site-management-service-config, key: REDIS_HOST } } }
            - { name: SPRING_REDIS_PORT, valueFrom: { configMapKeyRef: { name: site-management-service-config, key: REDIS_PORT } } }
            - { name: SPRING_REDIS_PASSWORD, valueFrom: { secretKeyRef: { name: site-management-service-secret, key: REDIS_PASSWORD } } }

            # Encryption (both names for code compatibility)
            - { name: ENCRYPTION_SECRET_KEY, valueFrom: { secretKeyRef: { name: site-management-service-secret, key: ENCRYPTION_SECRET_KEY } } }
            - { name: encryption.secret.key, valueFrom: { secretKeyRef: { name: site-management-service-secret, key: ENCRYPTION_SECRET_KEY } } }

            # S3
            - { name: amazonProperties.endpointUrl,    valueFrom: { configMapKeyRef: { name: site-management-service-config, key: amazonProperties.endpointUrl } } }
            - { name: amazonProperties.bucketName,     valueFrom: { configMapKeyRef: { name: site-management-service-config, key: amazonProperties.bucketName } } }
            - { name: amazonProperties.assetsBucketName, valueFrom: { configMapKeyRef: { name: site-management-service-config, key: amazonProperties.assetsBucketName } } }
            - { name: amazonProperties.accessKey,      valueFrom: { secretKeyRef: { name: site-management-service-secret, key: "amazonProperties.accessKey" } } }
            - { name: amazonProperties.secretKey,      valueFrom: { secretKeyRef: { name: site-management-service-secret, key: "amazonProperties.secretKey" } } }
            - { name: AWS_ACCESS_KEY,                  valueFrom: { secretKeyRef: { name: site-management-service-secret, key: AWS_ACCESS_KEY } } }
            - { name: AWS_SECRET_KEY,                  valueFrom: { secretKeyRef: { name: site-management-service-secret, key: AWS_SECRET_KEY } } }
            - { name: amazonProperties.assetsAccessKey, valueFrom: { secretKeyRef: { name: site-management-service-secret, key: "amazonProperties.assetsAccessKey" } } }
            - { name: amazonProperties.assetsSecretKey, valueFrom: { secretKeyRef: { name: site-management-service-secret, key: "amazonProperties.assetsSecretKey" } } }

            # External APIs
            - { name: catalog-service-api.base,            valueFrom: { configMapKeyRef: { name: site-management-service-config, key: catalog-service-api.base } } }
            - { name: fazeal-social-service-api.base,      valueFrom: { configMapKeyRef: { name: site-management-service-config, key: fazeal-social-service-api.base } } }
            - { name: user-notification-service-api.base,  valueFrom: { configMapKeyRef: { name: site-management-service-config, key: user-notification-service-api.base } } }

          startupProbe:
            tcpSocket: { port: 80 }
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 120
          readinessProbe:
            tcpSocket: { port: 80 }
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            tcpSocket: { port: 80 }
            initialDelaySeconds: 120
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3

          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1000m"
              memory: "2Gi"
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: site-management-service-hpa
  namespace: default
  labels:
    app: site-management-service
    component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: site-management-service
  minReplicas: 2
  maxReplicas: 8
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
        - type: Pods
          value: 2
          periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
        - type: Pods
          value: 1
          periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: site-management-service-pdb
  namespace: default
  labels:
    app: site-management-service
    component: pdb
spec:
  minAvailable: 50%
  selector:
    matchLabels:
      app: site-management-service
