---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fazeal-business-management-config
  namespace: default
  labels:
    app: fazeal-business-management
data:
  SERVICE_NAME: "fazeal-business-management"
  NAMESPACE: "default"
  ENVIRONMENT: "dev"
  LOG_LEVEL: "INFO"
  spring.profiles.active: "dev"
  server.port: "80"

  # Discovery
  DISCOVERY_URL: "http://192.168.1.212:8761"
  CONFIG_URL: "http://config-server"
  eureka.instance.ip-address: "fazeal-business-management"
  eureka.instance.prefer-ip-address: "true"
  spring.cloud.config.import-check.enabled: "false"

  # Database
  DB_HOST: "192.168.1.213"
  DB_PORT: "5432"
  SPRING_DATASOURCE_URL: "jdbc:postgresql://192.168.1.213:5432/business_management?currentSchema=public"

  # Redis
  REDIS_HOST: "192.168.1.217"
  REDIS_PORT: "6379"

  # S3
  amazonProperties.endpointUrl: "https://s3.us-east-1.wasabisys.com/"
  amazonProperties.bucketName: "fazeal-social-nonprod.fazeal.com"
  amazonProperties.assetsBucketName: "fazeal-ui-assets.fazeal.com"

  # External API Dependencies
  catalog-service-api: "http://catalog-service:80/api/v1"
  payment-service-api.base: "http://payment-service:80"
  fazeal-social-service-api.base: "http://api-server:80"
  album-api.base: "http://album-service:80"
  user-notification-service-api.base: "http://notification-service:80"
  site-management-service-api.base: "http://site-management-service:80/api/v1"
---
apiVersion: v1
kind: Secret
metadata:
  name: fazeal-business-management-secret
  namespace: default
  labels:
    app: fazeal-business-management
type: Opaque
data:
  DB_USER: YWRtaW4=
  DB_PASSWORD: bmV3MjAyNQ==
  REDIS_PASSWORD: YWRtaW4xMjM0
  JWT_SECRET: and0X3NlY3JldF9rZXlfZm9yX2ZhemVhbC1idXNpbmVzcy1tYW5hZ2VtZW50XzIwMjQ=
  API_KEY: YXBpX2tleV9mYXplYWwtYnVzaW5lc3MtbWFuYWdlbWVudF8yMDI0
  amazonProperties.accessKey: "VVU1MUJSWVFSOEpKSkQyWDBTMTE="
  amazonProperties.secretKey: "aXMzYTNSZWtUYlFIdHNFQTAydFVBYW40Q3pIU3VpQTdodFA2a2xScA=="
  AWS_ACCESS_KEY: "VVU1MUJSWVFSOEpKSkQyWDBTMTE="
  AWS_SECRET_KEY: "aXMzYTNSZWtUYlFIdHNFQTAydFVBYW40Q3pIU3VpQTdodFA2a2xScA=="
  amazonProperties.assetsSecretKey: "aXMzYTNSZWtUYlFIdHNFQTAydFVBYW40Q3pIU3VpQTdodFA2a2xScA=="
  amazonProperties.assetsAccessKey: "VVU1MUJSWVFSOEpKSkQyWDBTMTE="
---
apiVersion: v1
kind: Service
metadata:
  name: fazeal-business-management
  namespace: default
  labels:
    app: fazeal-business-management
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: fazeal-business-management
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fazeal-business-management
  namespace: default
  labels:
    app: fazeal-business-management
spec:
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: fazeal-business-management
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        app: fazeal-business-management
    spec:
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: dockerhub-secret
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

      initContainers:
        - name: wait-for-postgres
          image: busybox:1.36
          command: ["/bin/sh","-c"]
          args:
            - |
              echo "Waiting for ${DB_HOST}:${DB_PORT}...";
              until nc -z ${DB_HOST} ${DB_PORT}; do sleep 2; done;
              echo "Postgres is reachable.";
          env:
            - name: DB_HOST
              valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: DB_HOST } }
            - name: DB_PORT
              valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: DB_PORT } }

      containers:
        - name: fazeal-business-management
          image: khsaleh889/familymicroservices:$IMAGE
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP

          env:
            - { name: SERVICE_NAME, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: SERVICE_NAME } } }
            - { name: SPRING_DATASOURCE_URL, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: SPRING_DATASOURCE_URL } } }
            - { name: SPRING_DATASOURCE_USERNAME, valueFrom: { secretKeyRef: { name: fazeal-business-management-secret, key: DB_USER } } }
            - { name: SPRING_DATASOURCE_PASSWORD, valueFrom: { secretKeyRef: { name: fazeal-business-management-secret, key: DB_PASSWORD } } }
            - { name: REDIS_PASSWORD, valueFrom: { secretKeyRef: { name: fazeal-business-management-secret, key: REDIS_PASSWORD } } }
            - { name: JWT_SECRET, valueFrom: { secretKeyRef: { name: fazeal-business-management-secret, key: JWT_SECRET } } }
            - { name: API_KEY, valueFrom: { secretKeyRef: { name: fazeal-business-management-secret, key: API_KEY } } }
            - { name: amazonProperties.accessKey, valueFrom: { secretKeyRef: { name: fazeal-business-management-secret, key: "amazonProperties.accessKey" } } }
            - { name: amazonProperties.secretKey, valueFrom: { secretKeyRef: { name: fazeal-business-management-secret, key: "amazonProperties.secretKey" } } }
            - { name: AWS_ACCESS_KEY, valueFrom: { secretKeyRef: { name: fazeal-business-management-secret, key: AWS_ACCESS_KEY } } }
            - { name: AWS_SECRET_KEY, valueFrom: { secretKeyRef: { name: fazeal-business-management-secret, key: AWS_SECRET_KEY } } }
            - { name: amazonProperties.assetsSecretKey, valueFrom: { secretKeyRef: { name: fazeal-business-management-secret, key: "amazonProperties.assetsSecretKey" } } }
            - { name: amazonProperties.assetsAccessKey, valueFrom: { secretKeyRef: { name: fazeal-business-management-secret, key: "amazonProperties.assetsAccessKey" } } }
            - { name: NAMESPACE, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: NAMESPACE } } }
            - { name: ENVIRONMENT, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: ENVIRONMENT } } }
            - { name: LOG_LEVEL, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: LOG_LEVEL } } }
            - { name: spring.profiles.active, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: spring.profiles.active } } }
            - { name: server.port, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: server.port } } }
            - { name: DISCOVERY_URL, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: DISCOVERY_URL } } }
            - { name: CONFIG_URL, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: CONFIG_URL } } }
            - { name: eureka.instance.ip-address, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: eureka.instance.ip-address } } }
            - { name: eureka.instance.prefer-ip-address, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: eureka.instance.prefer-ip-address } } }
            - { name: spring.cloud.config.import-check.enabled, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: spring.cloud.config.import-check.enabled } } }
            - { name: REDIS_HOST, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: REDIS_HOST } } }
            - { name: REDIS_PORT, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: REDIS_PORT } } }
            - { name: amazonProperties.endpointUrl, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: amazonProperties.endpointUrl } } }
            - { name: amazonProperties.bucketName, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: amazonProperties.bucketName } } }
            - { name: amazonProperties.assetsBucketName, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: amazonProperties.assetsBucketName } } }
            - { name: catalog-service-api, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: catalog-service-api } } }
            - { name: payment-service-api.base, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: payment-service-api.base } } }
            - { name: fazeal-social-service-api.base, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: fazeal-social-service-api.base } } }
            - { name: album-api.base, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: album-api.base } } }
            - { name: user-notification-service-api.base, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: user-notification-service-api.base } } }
            - { name: site-management-service-api.base, valueFrom: { configMapKeyRef: { name: fazeal-business-management-config, key: site-management-service-api.base } } }

          startupProbe:
            tcpSocket: { port: 80 }
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 60
          readinessProbe:
            tcpSocket: { port: 80 }
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          livenessProbe:
            tcpSocket: { port: 80 }
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3

          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1000m"
              memory: "2Gi"
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fazeal-business-management-hpa
  namespace: default
  labels:
    app: fazeal-business-management
    component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fazeal-business-management
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 15
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fazeal-business-management-pdb
  namespace: default
  labels:
    app: fazeal-business-management
    component: pdb
spec:
  minAvailable: 50%
  selector:
    matchLabels:
      app: fazeal-business-management
